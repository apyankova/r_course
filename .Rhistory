library(ggplot2)
library(UsingR)
data(diamond)
diamond$e <- resid(lm(price~carat, data=diamond))
head(diamond)
g = ggplot(diamond, aes(x=carat, y=e))
g
install.packages("ggplot2")
library(ggplot2)
library(UsingR)
data(diamond)
diamond$e <- resid(lm(price~carat, data=diamond))
head(diamond)
g = ggplot(diamond, aes(x=carat, y=e))
g
g=g+xlab("Mass(carats)")
g=g+ylab("Residual price(SIN $)")
g=g+geom_hline(yintercept = 0, size= 2)
g=g+geom_point(size=7, colour="black", alpha=0.5)
g=g+geom_point(size=5, colour="blue", alpha=0.2)
g
g
y<-diamond$price; x<- diamond$carat; n<-length(y)
fit <- lm(y~x)
summay(fit)$sigma
summary(fit)$sigma
sqrt(sum(resid(fit)^2)/(n-2))
beta1<-cor(y,x)*sd(y)/sd(x)
beta1
beta0 <- mean(y)-beta1*x
beta0
beta0 <- mean(y)-beta1*mean(x)
beta0
e <- y- beta0-beta1*x
e
sigma <- sqrt(sum(e^2))/(n-2)
sigma
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
fit <- lm(y~x)
summary(fit)$p
summary(fit)
summary(fit)$p-value
fit <- lm(y~x)
summary(fit)
sqrt(sum(resid(fit)^2)/(n-2))
summary(fit)$sigma
library(UsingR)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
summary(fit)$p-value
sqrt(sum(resid(fit)^2)/(n-2))
summary(fit)$sigma
data(mtcars)
head(mtcars)
fit2<- lm(mpg~wt)
fit2<- lm(mpg~wt, data=mtcars)
summary(fit2)
summary(fit2)$coefficient
sumCoef[2,1]+c(-1,1)*qt(0.975; df=fit2$df)*sumCoef[2.2]
sumCoef <- summary(fit2)$coefficient
sumCoef[2,1]+c(-1,1)*qt(0.975; df=fit2$df)*sumCoef[2.2]
sumCoef[2,1]+c(-1,1)*qt(0.975; df=fit2$df)*sumCoef[2.2]
sumCoef[2.1]+c(-1,1)*qt(0.975; df=fit2$df)*sumCoef[2.2]
sumCoef[2,1]+c(-1,1)*qt(0.975; df=fit2$df)*sumCoef[2,2]
fit2<- lm(mpg~wt, data=mtcars)
sumCoef <- summary(fit2)$coefficient
sumCoef[2,1]+c(-1,1)*qt(0.975; df=fit2$df)*sumCoef[2,2]
sumCoef[2,1]+c(-1,1)*qt(.975, df=fit2$df)*sumCoef[2,2]
help(mtcars)
predict(fit, data=y, interval=("prediction"))
h<- 3000
predict(fit, data=h, interval=("prediction"))
predict(fit, data=h, interval=("prediction"))
p2 <- predict(fit, data=h, interval=("prediction"))
p2
(sumCoef[2,1]+c(-1,1)*qt(.975, df=fit2$df)*sumCoef[2,2])/10
sumCoef <- summary(fit2)$coefficient
sumCoef
h <-sumCoef[1,1]+sumCoef[2,1]*3000
h
p2 <- predict(fit, data=h, interval=("confidence"))
p2
h
sumCoef[2,1]+c(-1,1)*qt(.975, df=1)*sqrt(summary(fit2)$sigma))
sumCoef[2,1]+c(-1,1)*qt(.975, df=1)*sqrt(summary(fit2)$sigma)
sumCoef[2,1]+c(-1,1)*qt(.975, df=2)*sqrt(summary(fit2)$sigma)
sumCoef[2,1]+c(-1,1)*qt(.975, df=fit2$df)*sqrt(summary(fit2)$sigma)
sumCoef[2,1]+c(-1,1)*qt(.975, df=1)*sqrt(summary(fit2)$sigma)
Summary(h)
fit2<- lm(mpg~wt, data=mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
confint(fit2)[2, ] * 2
h
sumCoef[2,1]+c(-1,1)*qt(.975, df=1)*sqrt(summary(fit2)$sigma)
confint(fit2)
fit2<- lm(mpg~wt, data=mtcars)
confint(fit2)
library(swirl)
library(swirl)
swirl()
library(UsingR)
data("galton")
fit <-lm(child~parent, galton)
sum(resid(fit)^2)/(n-2))
sum(resid(fit)^2)/(n-2)
sqrt(sum(resid(fit)^2)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-s2))
sqrt(deviance(fit)/(n-2))
glimpse(galton)
mu<- mean(Child)
y <- Child$galton
data("galton")
mu<- mean(child, data=galton)
mu<- mean(child$galton)
help (galton)
mu<- mean(galton$child)
mu
sTot <- sum(galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- sum(deviance(fit))
sRes <- deviance(fit)
R2 <-1-sRes/sTot
R2
R2 <1-sRes/sTot
R2
1-sRes/sTot
summary(fit)$r.squared
cor(Child, parent)
cor(galton$Child, galton$parent)
x<-galton$Child
cor( galton$parent, galton$Child)^2
data("galton")
cor(galton$parent, galton$Child)^2
cor(galton$parent, galton$Child)^2
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
# Use the formula in a regression and return the residual.
resid(lm(formula, dataframe))
}
info()
bye()
fit2<- lm(mpg~(wt-meam(wt), data=mtcars)
confint(fit2)
confint(fit2)[2, ] * 2
sumCoef <- summary(fit2)$coefficient
sumCoef
h <-sumCoef[1,1]+sumCoef[2,1]*3000
h
sumCoef[2,1]+c(-1,1)*qt(.975, df=1)*sqrt(summary(fit2)$sigma)
(sumCoef[2,1]+c(-1,1)*qt(.975, df=fit2$df)*sumCoef[2,2])/10
help(mtcars)
h<- 3000
p2 <- predict(fit, data=h, interval=("confidence"))
p2
confint(fit2)
fit2<- lm(mpg~(wt-meam(wt)), data=mtcars)
fit2<- lm(mpg~(wt-mean(wt)), data=mtcars)
fit2<- lm(mpg~I(wt-mean(wt)), data=mtcars)
confint(fit2)
dev.off()
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
setwd("C:/R_CPK_2018/r_course")
pulse <- import('data/pulse.txt')
skim(pulse)
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
pulse_fct <- pulse %>%
mutate_at(starts_with("Pulse"), factor)
pulse_fct <- pulse %>%
mutate_at(dplyr::starts_with("Pulse"), factor)
pulse_fct <- pulse %>%
mutate_at(tidyselect::starts_with("Pulse"), factor)
pulse_fct <- pulse %>%
mutate_at(vars(Age, Height), factor)
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
model_r <- lm(data = pulse_fct, Pulse2 ~ Pulse1)
summary(model_r)
tidy(model_r)
glance(model_r)
coeftest(model_r)
ggplot(data = pulse_fct, aes(x = Pulse1, y = Pulse2)) +
geom_point() +
geom_smooth(method = 'lm')
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur)
ggnostic(model = model_ur)
library(GGally) # больше готовых графиков
ggnostic(model = model_ur)
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
ggnostic(model = model_ur)
coefci(model_ur, level = 0.8)
plot_model(model_ur, ci.lvl = 0.9)
?plot_model
plot_model(model_ur, type = "std", ci.lvl = 0.9)
plot_model(model_ur, type = "std", ci.lvl = 0.9)
vif(model_ur)
library(sjstats) # удобные мелкие функции для работы с моделями
plot_model(model_ur, type = "std", ci.lvl = 0.9)
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
install.packages("sjstats")
library(sjstats) # удобные мелкие функции для работы с моделями
plot_model(model_ur, type = "std", ci.lvl = 0.9)
plot_model(model_ur, type = "std", ci.lvl = 0.9)
library(sjPlot)
plot_model(model_ur, type = "std", ci.lvl = 0.9)
coefci(model_ur, level = 0.8)
plot_model(model_ur, type = "std", ci.lvl = 0.9)
library(sjPlot) # ещё больше графиков
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
plot_model(model_ur, type = "std", ci.lvl = 0.9)
sessionInfo()
install.packages(c("arm", "backports", "bdsmatrix", "BH", "bindr", "bindrcpp", "broom", "car", "caret", "classInt", "coin", "curl", "data.table", "DataExplorer", "deldir", "devtools", "digest", "dotCall64", "dplyr", "DT", "effects", "evaluate", "fda", "forcats", "foreach", "forecast", "foreign", "formatR", "Formula", "gdata", "GGally", "git2r", "glmmBUGS", "glmnet", "gss", "gstat", "hexbin", "highr", "HistData", "Hmisc", "hms", "HSAUR", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "hydroGOF", "hydroTSM", "iterators", "knitr", "lazyeval", "LearnBayes", "lme4", "lmtest", "mapproj", "maps", "markdown", "Matrix", "MCMCpack", "memisc", "memoise", "merTools", "Metrics", "multcomp", "munsell", "mvtnorm", "nlme", "openssl", "openxlsx", "pander", "pbkrtest", "pillar", "plm", "plogr", "poibin", "progress", "psych", "purrr", "quantmod", "quantreg", "randomForest", "rasterVis", "rattle", "RcppArmadillo", "RcppEigen", "RCurl", "reshape", "rgdal", "rgeos", "rgl", "RgoogleMaps", "rJava", "rjson", "rlang", "rmarkdown", "robustbase", "rpart", "rprojroot", "sandwich", "selectr", "shiny", "sjPlot", "sjstats", "skimr", "sourcetools", "sp", "spacetime", "spam", "SparseM", "spData", "spdep", "spgwr", "sphet", "splm", "stringdist", "stringi", "stringr", "survival", "systemfit", "testthat", "tidyselect", "timeDate", "tis", "tseries", "TTR", "UsingR", "utf8", "vcd", "viridis", "viridisLite", "XML", "xml2", "xts", "yaml", "zoo"))
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
plot_model(model_ur, type = "std", ci.lvl = 0.9)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(Ecdat) # много-много разных наборов данных
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
# Chunk 3
pulse <- import('data/pulse.txt')
skim(pulse)
# Chunk 4
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
# Chunk 5
model_r <- lm(data = pulse_fct, Pulse2 ~ Pulse1)
# Chunk 6
summary(model_r)
# Chunk 7
house <- Housing
# ___
# Chunk 8
# house_r <- lm(data = ___, ___ ~ ___)
# summary(___)
# Chunk 9
tidy(model_r)
# Chunk 10
glance(model_r)
# Chunk 11
coeftest(model_r)
# Chunk 12
ggplot(data = pulse_fct, aes(x = Pulse1, y = Pulse2)) +
geom_point() +
geom_smooth(method = 'lm')
# Chunk 13
# ggplot(data = ___, aes(x = ___, y = ___)) +
#   ___() +
#   geom_smooth(method = ___)
# Chunk 14
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur)
# Chunk 15
# house_ur <- lm(data = ___, ___ ~ ___)
# summary(___)
# Chunk 16
ggnostic(model = model_ur)
# Chunk 17
coefci(model_ur, level = 0.8)
library(sjPlot)
plot_model(model_ur, type = "std", ci.lvl = 0.9)
# Chunk 18
vif(model_ur)
# Chunk 19
# coefci(___)
# plot_model(___, ci.lvl = ___)
# Chunk 20
waldtest(model_r, model_ur)
# Chunk 21
# waldtest(___, ___)
# Chunk 22
model_mu <- lm(data = pulse_fct, Pulse1 ~ 1)
confint(model_mu)
# Chunk 23
model_diff <- lm(data = pulse_fct, Pulse1 ~ Smokes)
confint(model_diff)
# Chunk 24
# house_mu <- lm(data = ___, ___ ~ ___)
# summary(___)
# house_diff <- lm(data = ___, ___ ~ ___)
# summary(___)
# Chunk 25
model_2anova <- lm(data = pulse_fct, Pulse1 ~ Smokes * Gender)
summary(model_2anova)
anova_stats(model_2anova)
# Chunk 26
# house_2anova <- lm(data = ___, ___ ~ ___ * ___)
# summary(___)
# Chunk 27
coeftest(model_ur, vcov. = vcovHC)
# Chunk 28
coefci(model_ur, vcov. = vcovHC)
# Chunk 29
coeftest(model_ur, vcov. = vcovHC(model_ur, type = "HC1"))
# Chunk 30
waldtest(model_r, model_ur, vcov = vcovHC)
# Chunk 31
# coeftest(___, vcov. = ___, type = ____)
# waldtest(___, ___, vcov =  vcovHC)
# Chunk 32
glimpse(Mroz)
# Chunk 33
labor <- filter(Mroz, wagew > 0)
# Chunk 34
model_lm <- lm(data = labor, log(wagew) ~ educw + experience + I(experience^2))
summary(model_lm)
# Chunk 35
model_iv <- ivreg(data = labor,
log(wagew) ~ educw + experience + I(experience^2) |
experience + I(experience^2) + educwm + educwf)
summary(model_iv, diagnostics = TRUE)
# Chunk 36
data("CigarettesSW")
cig <- subset(CigarettesSW, year == 1995)
cig$lrprice <- log(cig$price / cig$cpi)
cig$lrincome <- log(cig$income / cig$population / cig$cpi)
cig$lquant <- log(cig$packs)
cig$tdiff <- (cig$taxs - cig$tax) / cig$cpi
# glimpse(___)
# skim(___)
# Chunk 37
# cig_iv1 <- ivreg(data = ___, ___ ~ ___ | ___)
# summary(___, diagnostics = ___)
# Chunk 38
# cig_iv2 <- ivreg(data = ___, ___ ~ ___ + ___ | ____ + ___ + I(tax/cpi))
# summary(___, ___ = ___)
install.packages(c("huxtable", "stargazer", "texreg", "estimatr"))
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(Ecdat) # много-много разных наборов данных
library(huxtable) # красивые таблички в html, tex
library(stargazer) # красивые таблички в html, tex
library(texreg) # и снова красивые таблички в html, tex :)
library(estimatr) # модели с робастными ошибками
setwd("C:/R_CPK_2018/r_course")
pulse <- import('data/pulse.txt')
pulse_fct <- pulse %>%
mutate_at(vars(-Weight, -Height, -Age, -Pulse1, -Pulse2), factor)
model_r <- lm(data = pulse_fct, Pulse2 ~ Pulse1)
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
Summary(model_ur)
model_r <- lm(data = pulse_fct, Pulse2 ~ Pulse1)
model_ur <- lm(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
Summary(model_ur)
summary(model_ur)
?lm_robast
?lm_robust
model_r_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Pulse1)
model_ur_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes)
summary(model_ur_rob)
model_ur_rob <- lm_robust(data = pulse_fct, Pulse2 ~ Weight + Pulse1 + Ran + Smokes, , se_type="HC1")
summary(model_ur_rob)
coeftest(model_ur_rob)
coefci(model_ur_rob)
coefci(model_ur_rob, level = 0.9)
waldtest(model_r_rob, model_ur_rob)
view(model_ur)
coeftest(model_ur, vcov. = vcovHC)
coefci(model_ur, vcov. = vcovHC)
coeftest(model_ur, vcov. = vcovHC(model_ur, type = "HC1"))
waldtest(model_r, model_ur, vcov = vcovHC)
bptest(Pulse2 ~ Pulse1 + Smokes,
vafvormula = ~ Smokes,
data= pulse_fct)
bptest(Pulse2 ~ Pulse1 + Smokes,
vafvormula = ~ Smokes,
data = pulse_fct)
bptest(Pulse2 ~ Pulse1 + Smokes,
vafvormula = ~ Smokes,
data = pulse_fct)
bptest(Pulse2 ~ Pulse1 + Smokes,
vafvormula = ~ Smokes,
data = pulse_fct)
bptest(Pulse2 ~ Pulse1 + Smokes,
vafvormula = ~ Smokes,
data = pulse_fct)
bptest(Pulse2 ~ Pulse1 + Smokes,
varvormula = ~ Smokes,
data = pulse_fct)
bptest(Pulse2 ~ Pulse1 + Smokes,
varformula = ~ Smokes,
data = pulse_fct)
install.packages("yaml")
library(yaml)
library(yaml)
install.packages("yaml")
library(yaml)
glimpse(Mroz)
labor <- filter(Mroz, wagew > 0)
labor <- filter(Mroz, wagew > 0)
glimpse(Mroz)
glimpse(Mroz)
labor <- filter(Mroz, wagew > 0)
install.packages("dplyr")
install.packages("yaml")
install.packages("yaml")
View(Mroz)
mroz<-mroz
mroz<-Mroz
install.packages("Ecdat")
library(Ecdat)
glimpse(Mroz)
glimpse(Mroz)
glimpse(Mroz)
labor <- filter(Mroz, wagew > 0)
Mroz<-Mroz
labor <- filter(Mroz, wagew > 0)
labor <- filter(Ecdat::Mroz, wagew > 0)
labor <- filter(Ecdat::Mroz, wagew > 0)
Ecdat::Mroz
labor <- filter(Ecdat::Mroz, wagew > 0)
library(tidyverse) # обработка данных, графики...
library(skimr) # описательные статистики
library(rio) # импорт фантастического количества форматов данных
library(broom) # метла превращает результаты оценивания моделей в таблички
library(GGally) # больше готовых графиков
library(sjPlot) # ещё больше графиков
library(lmtest) # диагностика линейных моделей
library(sjstats) # удобные мелкие функции для работы с моделями
library(sandwich) # оценка Var для гетероскедастичности
library(AER) # работа с инструментальными переменными
library(Ecdat) # много-много разных наборов данных
library(huxtable) # красивые таблички в html, tex
library(stargazer) # красивые таблички в html, tex
library(texreg) # и снова красивые таблички в html, tex :)
library(estimatr) # модели с робастными ошибками
library(yaml)
glimpse(Mroz)
Mroz<-Mroz
labor <- filter(Ecdat::Mroz, wagew > 0)
labor
labor <- filter(Ecdat::Mroz, wagew > 0)
glimpse(labor)
model_iv <- ivreg(data = labor,
log(wagew) ~ educw + experience + I(experience^2) |
experience + I(experience^2) + educwm + educwf)
summary(model_iv, diagnostics = TRUE)
